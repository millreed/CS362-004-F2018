************* START OF TEST FOR numHandCards *************

Testing numHandCards for 4 players with hands up to 500 cards
Testing player 1 with 0 cards in hand.
****PASSED**** Player 1 cards in hand = 0, expected = 0

Testing player 1 with 1 cards in hand.
****PASSED**** Player 1 cards in hand = 1, expected = 1

Testing player 1 with 2 cards in hand.
****PASSED**** Player 1 cards in hand = 2, expected = 2

Testing player 1 with 3 cards in hand.
****PASSED**** Player 1 cards in hand = 3, expected = 3

Testing player 1 with 4 cards in hand.
****PASSED**** Player 1 cards in hand = 4, expected = 4

Testing player 1 with 5 cards in hand.
****PASSED**** Player 1 cards in hand = 5, expected = 5

Testing player 1 with 6 cards in hand.
****PASSED**** Player 1 cards in hand = 6, expected = 6

Testing player 1 with 7 cards in hand.
****PASSED**** Player 1 cards in hand = 7, expected = 7

Testing player 1 with 8 cards in hand.
****PASSED**** Player 1 cards in hand = 8, expected = 8

Testing player 1 with 9 cards in hand.
****PASSED**** Player 1 cards in hand = 9, expected = 9

Testing player 1 with 10 cards in hand.
****PASSED**** Player 1 cards in hand = 10, expected = 10

Testing player 1 with 11 cards in hand.
****PASSED**** Player 1 cards in hand = 11, expected = 11

Testing player 1 with 12 cards in hand.
****PASSED**** Player 1 cards in hand = 12, expected = 12

Testing player 1 with 13 cards in hand.
****PASSED**** Player 1 cards in hand = 13, expected = 13

Testing player 1 with 14 cards in hand.
****PASSED**** Player 1 cards in hand = 14, expected = 14

Testing player 1 with 15 cards in hand.
****PASSED**** Player 1 cards in hand = 15, expected = 15

Testing player 1 with 16 cards in hand.
****PASSED**** Player 1 cards in hand = 16, expected = 16

Testing player 1 with 17 cards in hand.
****PASSED**** Player 1 cards in hand = 17, expected = 17

Testing player 1 with 18 cards in hand.
****PASSED**** Player 1 cards in hand = 18, expected = 18

Testing player 1 with 19 cards in hand.
****PASSED**** Player 1 cards in hand = 19, expected = 19

Testing player 1 with 20 cards in hand.
****PASSED**** Player 1 cards in hand = 20, expected = 20

Testing player 2 with 0 cards in hand.
****PASSED**** Player 2 cards in hand = 0, expected = 0

Testing player 2 with 1 cards in hand.
****PASSED**** Player 2 cards in hand = 1, expected = 1

Testing player 2 with 2 cards in hand.
****PASSED**** Player 2 cards in hand = 2, expected = 2

Testing player 2 with 3 cards in hand.
****PASSED**** Player 2 cards in hand = 3, expected = 3

Testing player 2 with 4 cards in hand.
****PASSED**** Player 2 cards in hand = 4, expected = 4

Testing player 2 with 5 cards in hand.
****PASSED**** Player 2 cards in hand = 5, expected = 5

Testing player 2 with 6 cards in hand.
****PASSED**** Player 2 cards in hand = 6, expected = 6

Testing player 2 with 7 cards in hand.
****PASSED**** Player 2 cards in hand = 7, expected = 7

Testing player 2 with 8 cards in hand.
****PASSED**** Player 2 cards in hand = 8, expected = 8

Testing player 2 with 9 cards in hand.
****PASSED**** Player 2 cards in hand = 9, expected = 9

Testing player 2 with 10 cards in hand.
****PASSED**** Player 2 cards in hand = 10, expected = 10

Testing player 2 with 11 cards in hand.
****PASSED**** Player 2 cards in hand = 11, expected = 11

Testing player 2 with 12 cards in hand.
****PASSED**** Player 2 cards in hand = 12, expected = 12

Testing player 2 with 13 cards in hand.
****PASSED**** Player 2 cards in hand = 13, expected = 13

Testing player 2 with 14 cards in hand.
****PASSED**** Player 2 cards in hand = 14, expected = 14

Testing player 2 with 15 cards in hand.
****PASSED**** Player 2 cards in hand = 15, expected = 15

Testing player 2 with 16 cards in hand.
****PASSED**** Player 2 cards in hand = 16, expected = 16

Testing player 2 with 17 cards in hand.
****PASSED**** Player 2 cards in hand = 17, expected = 17

Testing player 2 with 18 cards in hand.
****PASSED**** Player 2 cards in hand = 18, expected = 18

Testing player 2 with 19 cards in hand.
****PASSED**** Player 2 cards in hand = 19, expected = 19

Testing player 2 with 20 cards in hand.
****PASSED**** Player 2 cards in hand = 20, expected = 20

Testing player 3 with 0 cards in hand.
****PASSED**** Player 3 cards in hand = 0, expected = 0

Testing player 3 with 1 cards in hand.
****PASSED**** Player 3 cards in hand = 1, expected = 1

Testing player 3 with 2 cards in hand.
****PASSED**** Player 3 cards in hand = 2, expected = 2

Testing player 3 with 3 cards in hand.
****PASSED**** Player 3 cards in hand = 3, expected = 3

Testing player 3 with 4 cards in hand.
****PASSED**** Player 3 cards in hand = 4, expected = 4

Testing player 3 with 5 cards in hand.
****PASSED**** Player 3 cards in hand = 5, expected = 5

Testing player 3 with 6 cards in hand.
****PASSED**** Player 3 cards in hand = 6, expected = 6

Testing player 3 with 7 cards in hand.
****PASSED**** Player 3 cards in hand = 7, expected = 7

Testing player 3 with 8 cards in hand.
****PASSED**** Player 3 cards in hand = 8, expected = 8

Testing player 3 with 9 cards in hand.
****PASSED**** Player 3 cards in hand = 9, expected = 9

Testing player 3 with 10 cards in hand.
****PASSED**** Player 3 cards in hand = 10, expected = 10

Testing player 3 with 11 cards in hand.
****PASSED**** Player 3 cards in hand = 11, expected = 11

Testing player 3 with 12 cards in hand.
****PASSED**** Player 3 cards in hand = 12, expected = 12

Testing player 3 with 13 cards in hand.
****PASSED**** Player 3 cards in hand = 13, expected = 13

Testing player 3 with 14 cards in hand.
****PASSED**** Player 3 cards in hand = 14, expected = 14

Testing player 3 with 15 cards in hand.
****PASSED**** Player 3 cards in hand = 15, expected = 15

Testing player 3 with 16 cards in hand.
****PASSED**** Player 3 cards in hand = 16, expected = 16

Testing player 3 with 17 cards in hand.
****PASSED**** Player 3 cards in hand = 17, expected = 17

Testing player 3 with 18 cards in hand.
****PASSED**** Player 3 cards in hand = 18, expected = 18

Testing player 3 with 19 cards in hand.
****PASSED**** Player 3 cards in hand = 19, expected = 19

Testing player 3 with 20 cards in hand.
****PASSED**** Player 3 cards in hand = 20, expected = 20

Testing player 4 with 0 cards in hand.
****PASSED**** Player 4 cards in hand = 0, expected = 0

Testing player 4 with 1 cards in hand.
****PASSED**** Player 4 cards in hand = 1, expected = 1

Testing player 4 with 2 cards in hand.
****PASSED**** Player 4 cards in hand = 2, expected = 2

Testing player 4 with 3 cards in hand.
****PASSED**** Player 4 cards in hand = 3, expected = 3

Testing player 4 with 4 cards in hand.
****PASSED**** Player 4 cards in hand = 4, expected = 4

Testing player 4 with 5 cards in hand.
****PASSED**** Player 4 cards in hand = 5, expected = 5

Testing player 4 with 6 cards in hand.
****PASSED**** Player 4 cards in hand = 6, expected = 6

Testing player 4 with 7 cards in hand.
****PASSED**** Player 4 cards in hand = 7, expected = 7

Testing player 4 with 8 cards in hand.
****PASSED**** Player 4 cards in hand = 8, expected = 8

Testing player 4 with 9 cards in hand.
****PASSED**** Player 4 cards in hand = 9, expected = 9

Testing player 4 with 10 cards in hand.
****PASSED**** Player 4 cards in hand = 10, expected = 10

Testing player 4 with 11 cards in hand.
****PASSED**** Player 4 cards in hand = 11, expected = 11

Testing player 4 with 12 cards in hand.
****PASSED**** Player 4 cards in hand = 12, expected = 12

Testing player 4 with 13 cards in hand.
****PASSED**** Player 4 cards in hand = 13, expected = 13

Testing player 4 with 14 cards in hand.
****PASSED**** Player 4 cards in hand = 14, expected = 14

Testing player 4 with 15 cards in hand.
****PASSED**** Player 4 cards in hand = 15, expected = 15

Testing player 4 with 16 cards in hand.
****PASSED**** Player 4 cards in hand = 16, expected = 16

Testing player 4 with 17 cards in hand.
****PASSED**** Player 4 cards in hand = 17, expected = 17

Testing player 4 with 18 cards in hand.
****PASSED**** Player 4 cards in hand = 18, expected = 18

Testing player 4 with 19 cards in hand.
****PASSED**** Player 4 cards in hand = 19, expected = 19

Testing player 4 with 20 cards in hand.
****PASSED**** Player 4 cards in hand = 20, expected = 20

All tests passed!
************* END OF TEST FOR numHandCards *************

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:83.33% of 78
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:0.00% of 4
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:0.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 268
Branches executed:0.00% of 185
Taken at least once:0.00% of 185
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

File 'dominion.c'
Lines executed:16.44% of 651
Branches executed:16.31% of 417
Taken at least once:13.19% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR handCard *************

Testing handCard for 4 players
Testing player 1
 ****PASSED****Player 1's 0 card in hand = 0, expected = 0

 ****PASSED****Player 1's 1 card in hand = 1, expected = 1

 ****PASSED****Player 1's 2 card in hand = 2, expected = 2

 ****PASSED****Player 1's 3 card in hand = 3, expected = 3

 ****PASSED****Player 1's 4 card in hand = 4, expected = 4

 ****PASSED****Player 1's 5 card in hand = 5, expected = 5

 ****PASSED****Player 1's 6 card in hand = 6, expected = 6

 ****PASSED****Player 1's 7 card in hand = 7, expected = 7

 ****PASSED****Player 1's 8 card in hand = 8, expected = 8

 ****PASSED****Player 1's 9 card in hand = 9, expected = 9

 ****PASSED****Player 1's 10 card in hand = 10, expected = 10

 ****PASSED****Player 1's 11 card in hand = 11, expected = 11

 ****PASSED****Player 1's 12 card in hand = 12, expected = 12

 ****PASSED****Player 1's 13 card in hand = 13, expected = 13

 ****PASSED****Player 1's 14 card in hand = 14, expected = 14

 ****PASSED****Player 1's 15 card in hand = 15, expected = 15

 ****PASSED****Player 1's 16 card in hand = 16, expected = 16

 ****PASSED****Player 1's 17 card in hand = 17, expected = 17

 ****PASSED****Player 1's 18 card in hand = 18, expected = 18

 ****PASSED****Player 1's 19 card in hand = 19, expected = 19

 ****PASSED****Player 1's 20 card in hand = 20, expected = 20

 ****PASSED****Player 1's 21 card in hand = 21, expected = 21

 ****PASSED****Player 1's 22 card in hand = 22, expected = 22

 ****PASSED****Player 1's 23 card in hand = 23, expected = 23

 ****PASSED****Player 1's 24 card in hand = 24, expected = 24

 ****PASSED****Player 1's 25 card in hand = 25, expected = 25

 ****PASSED****Player 1's 26 card in hand = 26, expected = 26

Testing player 2
 ****PASSED****Player 2's 0 card in hand = 0, expected = 0

 ****PASSED****Player 2's 1 card in hand = 1, expected = 1

 ****PASSED****Player 2's 2 card in hand = 2, expected = 2

 ****PASSED****Player 2's 3 card in hand = 3, expected = 3

 ****PASSED****Player 2's 4 card in hand = 4, expected = 4

 ****PASSED****Player 2's 5 card in hand = 5, expected = 5

 ****PASSED****Player 2's 6 card in hand = 6, expected = 6

 ****PASSED****Player 2's 7 card in hand = 7, expected = 7

 ****PASSED****Player 2's 8 card in hand = 8, expected = 8

 ****PASSED****Player 2's 9 card in hand = 9, expected = 9

 ****PASSED****Player 2's 10 card in hand = 10, expected = 10

 ****PASSED****Player 2's 11 card in hand = 11, expected = 11

 ****PASSED****Player 2's 12 card in hand = 12, expected = 12

 ****PASSED****Player 2's 13 card in hand = 13, expected = 13

 ****PASSED****Player 2's 14 card in hand = 14, expected = 14

 ****PASSED****Player 2's 15 card in hand = 15, expected = 15

 ****PASSED****Player 2's 16 card in hand = 16, expected = 16

 ****PASSED****Player 2's 17 card in hand = 17, expected = 17

 ****PASSED****Player 2's 18 card in hand = 18, expected = 18

 ****PASSED****Player 2's 19 card in hand = 19, expected = 19

 ****PASSED****Player 2's 20 card in hand = 20, expected = 20

 ****PASSED****Player 2's 21 card in hand = 21, expected = 21

 ****PASSED****Player 2's 22 card in hand = 22, expected = 22

 ****PASSED****Player 2's 23 card in hand = 23, expected = 23

 ****PASSED****Player 2's 24 card in hand = 24, expected = 24

 ****PASSED****Player 2's 25 card in hand = 25, expected = 25

 ****PASSED****Player 2's 26 card in hand = 26, expected = 26

Testing player 3
 ****PASSED****Player 3's 0 card in hand = 0, expected = 0

 ****PASSED****Player 3's 1 card in hand = 1, expected = 1

 ****PASSED****Player 3's 2 card in hand = 2, expected = 2

 ****PASSED****Player 3's 3 card in hand = 3, expected = 3

 ****PASSED****Player 3's 4 card in hand = 4, expected = 4

 ****PASSED****Player 3's 5 card in hand = 5, expected = 5

 ****PASSED****Player 3's 6 card in hand = 6, expected = 6

 ****PASSED****Player 3's 7 card in hand = 7, expected = 7

 ****PASSED****Player 3's 8 card in hand = 8, expected = 8

 ****PASSED****Player 3's 9 card in hand = 9, expected = 9

 ****PASSED****Player 3's 10 card in hand = 10, expected = 10

 ****PASSED****Player 3's 11 card in hand = 11, expected = 11

 ****PASSED****Player 3's 12 card in hand = 12, expected = 12

 ****PASSED****Player 3's 13 card in hand = 13, expected = 13

 ****PASSED****Player 3's 14 card in hand = 14, expected = 14

 ****PASSED****Player 3's 15 card in hand = 15, expected = 15

 ****PASSED****Player 3's 16 card in hand = 16, expected = 16

 ****PASSED****Player 3's 17 card in hand = 17, expected = 17

 ****PASSED****Player 3's 18 card in hand = 18, expected = 18

 ****PASSED****Player 3's 19 card in hand = 19, expected = 19

 ****PASSED****Player 3's 20 card in hand = 20, expected = 20

 ****PASSED****Player 3's 21 card in hand = 21, expected = 21

 ****PASSED****Player 3's 22 card in hand = 22, expected = 22

 ****PASSED****Player 3's 23 card in hand = 23, expected = 23

 ****PASSED****Player 3's 24 card in hand = 24, expected = 24

 ****PASSED****Player 3's 25 card in hand = 25, expected = 25

 ****PASSED****Player 3's 26 card in hand = 26, expected = 26

Testing player 4
 ****PASSED****Player 4's 0 card in hand = 0, expected = 0

 ****PASSED****Player 4's 1 card in hand = 1, expected = 1

 ****PASSED****Player 4's 2 card in hand = 2, expected = 2

 ****PASSED****Player 4's 3 card in hand = 3, expected = 3

 ****PASSED****Player 4's 4 card in hand = 4, expected = 4

 ****PASSED****Player 4's 5 card in hand = 5, expected = 5

 ****PASSED****Player 4's 6 card in hand = 6, expected = 6

 ****PASSED****Player 4's 7 card in hand = 7, expected = 7

 ****PASSED****Player 4's 8 card in hand = 8, expected = 8

 ****PASSED****Player 4's 9 card in hand = 9, expected = 9

 ****PASSED****Player 4's 10 card in hand = 10, expected = 10

 ****PASSED****Player 4's 11 card in hand = 11, expected = 11

 ****PASSED****Player 4's 12 card in hand = 12, expected = 12

 ****PASSED****Player 4's 13 card in hand = 13, expected = 13

 ****PASSED****Player 4's 14 card in hand = 14, expected = 14

 ****PASSED****Player 4's 15 card in hand = 15, expected = 15

 ****PASSED****Player 4's 16 card in hand = 16, expected = 16

 ****PASSED****Player 4's 17 card in hand = 17, expected = 17

 ****PASSED****Player 4's 18 card in hand = 18, expected = 18

 ****PASSED****Player 4's 19 card in hand = 19, expected = 19

 ****PASSED****Player 4's 20 card in hand = 20, expected = 20

 ****PASSED****Player 4's 21 card in hand = 21, expected = 21

 ****PASSED****Player 4's 22 card in hand = 22, expected = 22

 ****PASSED****Player 4's 23 card in hand = 23, expected = 23

 ****PASSED****Player 4's 24 card in hand = 24, expected = 24

 ****PASSED****Player 4's 25 card in hand = 25, expected = 25

 ****PASSED****Player 4's 26 card in hand = 26, expected = 26

All tests passed!

************* END OF TEST FOR handCard *************

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:83.33% of 78
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:86.36% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:0.00% of 4
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:0.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 268
Branches executed:0.00% of 185
Taken at least once:0.00% of 185
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

File 'dominion.c'
Lines executed:19.66% of 651
Branches executed:17.75% of 417
Taken at least once:14.39% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR buyCard *************

Testing buyCard for 4 players
Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 92, expected = 92
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 1 numBuys = 0
****PASSED****Player 1
 cardBought = -1, expected = -1

Testing player 1 supplyCount = 0 
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 1 for coins < cost
****PASSED****Player 1
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 1 for buying a Card
****FAILED*****
Player 1
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 92, expected = 92
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 2 numBuys = 0
****PASSED****Player 2
 cardBought = -1, expected = -1

Testing player 2 supplyCount = 0 
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 2 for coins < cost
****PASSED****Player 2
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 2 for buying a Card
****FAILED*****
Player 2
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 92, expected = 92
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 3 numBuys = 0
****PASSED****Player 3
 cardBought = -1, expected = -1

Testing player 3 supplyCount = 0 
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 3 for coins < cost
****PASSED****Player 3
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 3 for buying a Card
****FAILED*****
Player 3
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 92, expected = 92
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 100, expected = 100
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 94, expected = 94
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 97, expected = 97
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 98, expected = 98
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 95, expected = 95
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Testing player 4 numBuys = 0
****PASSED****Player 4
 cardBought = -1, expected = -1

Testing player 4 supplyCount = 0 
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2

Testing player 4 for coins < cost
****PASSED****Player 4
 cardBought = -1, expected = -1
 numBuys = 2, expected = 2
 supplyCount = 2, expected = 2

Testing player 4 for buying a Card
****FAILED*****
Player 4
 cardBought = 0, expected = 0
 numBuys = 1, expected = 1
 supplyCount = 1, expected = 1
 coins = 96, expected = 96
 phase = 1, expected = 1
 discardCount = 0, expected = 1 

Failed 108 Tests!

************* END OF TEST FOR buyCard *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:83.33% of 78
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:0.00% of 4
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:0.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 268
Branches executed:0.00% of 185
Taken at least once:0.00% of 185
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:31.34% of 651
Branches executed:28.30% of 417
Taken at least once:25.42% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR fullDeckCount *************

Testing fullDeckCount for 4 players
Testing player 1 for card counts
****PASSED****
Player 1's deck counts are:
 curse = 3, expected = 3
 estate = 2, expected = 2
 duchy = 2, expected = 2
 province = 2, expected = 2
 copper = 1, expected = 1
 silver = 1, expected = 1
 gold = 1, expected = 1
 adventurer = 0, expected = 0
 council_room = 6, expected = 6
 

Testing player 2 for card counts
****PASSED****
Player 2's deck counts are:
 curse = 3, expected = 3
 estate = 2, expected = 2
 duchy = 2, expected = 2
 province = 2, expected = 2
 copper = 1, expected = 1
 silver = 1, expected = 1
 gold = 1, expected = 1
 adventurer = 0, expected = 0
 council_room = 6, expected = 6
 

Testing player 3 for card counts
****PASSED****
Player 3's deck counts are:
 curse = 3, expected = 3
 estate = 2, expected = 2
 duchy = 2, expected = 2
 province = 2, expected = 2
 copper = 1, expected = 1
 silver = 1, expected = 1
 gold = 1, expected = 1
 adventurer = 0, expected = 0
 council_room = 6, expected = 6
 

Testing player 4 for card counts
****PASSED****
Player 4's deck counts are:
 curse = 3, expected = 3
 estate = 2, expected = 2
 duchy = 2, expected = 2
 province = 2, expected = 2
 copper = 1, expected = 1
 silver = 1, expected = 1
 gold = 1, expected = 1
 adventurer = 0, expected = 0
 council_room = 6, expected = 6
 

All tests passed!

************* END OF TEST FOR fullDeckCount *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:84.62% of 78
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:0.00% of 4
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:0.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 268
Branches executed:0.00% of 185
Taken at least once:0.00% of 185
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:33.18% of 651
Branches executed:31.18% of 417
Taken at least once:28.54% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR smithy Card *************

Testing smithy for 4 players
Testing player 1 Smithy Card with 5 card in hand
****FAILED*****
Player 1
 handcount = 8, expected = 7
 smithy return = 0, expected = 0

Testing player 1 Smithy Card with 100 cards in hand
****FAILED*****
Player 1
 handcount = 103, expected = 102
 smithy return = 0, expected = 0

Testing player 1 Smithy Card with 0 cards in hand
****FAILED*****
Player 1
 handcount = 3, expected = 2
 smithy return = 0, expected = 0

Testing player 2 Smithy Card with 5 card in hand
****FAILED*****
Player 2
 handcount = 8, expected = 7
 smithy return = 0, expected = 0

Testing player 2 Smithy Card with 100 cards in hand
****FAILED*****
Player 2
 handcount = 103, expected = 102
 smithy return = 0, expected = 0

Testing player 2 Smithy Card with 0 cards in hand
****FAILED*****
Player 2
 handcount = 3, expected = 2
 smithy return = 0, expected = 0

Testing player 3 Smithy Card with 5 card in hand
****FAILED*****
Player 3
 handcount = 8, expected = 7
 smithy return = 0, expected = 0

Testing player 3 Smithy Card with 100 cards in hand
****FAILED*****
Player 3
 handcount = 103, expected = 102
 smithy return = 0, expected = 0

Testing player 3 Smithy Card with 0 cards in hand
****FAILED*****
Player 3
 handcount = 3, expected = 2
 smithy return = 0, expected = 0

Testing player 4 Smithy Card with 5 card in hand
****FAILED*****
Player 4
 handcount = 8, expected = 7
 smithy return = 0, expected = 0

Testing player 4 Smithy Card with 100 cards in hand
****FAILED*****
Player 4
 handcount = 103, expected = 102
 smithy return = 0, expected = 0

Testing player 4 Smithy Card with 0 cards in hand
****FAILED*****
Player 4
 handcount = 3, expected = 2
 smithy return = 0, expected = 0

Failed 12 Tests!

************* END OF TEST FOR smithy Card *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:84.62% of 78
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:0.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:4.48% of 268
Branches executed:12.43% of 185
Taken at least once:1.62% of 185
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:35.64% of 651
Branches executed:37.17% of 417
Taken at least once:29.74% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR village card *************

Testing village for 4 players
Testing player 1 village card with 5 cards in hand and 1 action
****PASSED****
Player 1
 handcount = 5, expected = 5
 deckCount = 26, expected = 26
 discardCount = 0, expected = 0
 actions = 2, expected = 2
 village return = 0, expected = 0

Testing player 1 village card with 5 cards in hand and 3 actions
****PASSED****
Player 1
 handcount = 5, expected = 5
 deckCount = 25, expected = 25
 discardCount = 0, expected = 0
 actions = 4, expected = 4
 village return = 0, expected = 0

Testing player 2 village card with 5 cards in hand and 1 action
****PASSED****
Player 2
 handcount = 5, expected = 5
 deckCount = 26, expected = 26
 discardCount = 0, expected = 0
 actions = 2, expected = 2
 village return = 0, expected = 0

Testing player 2 village card with 5 cards in hand and 3 actions
****PASSED****
Player 2
 handcount = 5, expected = 5
 deckCount = 25, expected = 25
 discardCount = 0, expected = 0
 actions = 4, expected = 4
 village return = 0, expected = 0

Testing player 3 village card with 5 cards in hand and 1 action
****PASSED****
Player 3
 handcount = 5, expected = 5
 deckCount = 26, expected = 26
 discardCount = 0, expected = 0
 actions = 2, expected = 2
 village return = 0, expected = 0

Testing player 3 village card with 5 cards in hand and 3 actions
****PASSED****
Player 3
 handcount = 5, expected = 5
 deckCount = 25, expected = 25
 discardCount = 0, expected = 0
 actions = 4, expected = 4
 village return = 0, expected = 0

Testing player 4 village card with 5 cards in hand and 1 action
****PASSED****
Player 4
 handcount = 5, expected = 5
 deckCount = 26, expected = 26
 discardCount = 0, expected = 0
 actions = 2, expected = 2
 village return = 0, expected = 0

Testing player 4 village card with 5 cards in hand and 3 actions
****PASSED****
Player 4
 handcount = 5, expected = 5
 deckCount = 25, expected = 25
 discardCount = 0, expected = 0
 actions = 4, expected = 4
 village return = 0, expected = 0

************* END OF TEST FOR village card *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:84.62% of 78
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:100.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:5.22% of 268
Branches executed:12.43% of 185
Taken at least once:2.16% of 185
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:38.40% of 651
Branches executed:38.61% of 417
Taken at least once:30.70% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR cutpurse card *************

Testing cutpurse for 4 players
It is Player 1's turn
Copper amounts for each player pre cutpurse call:
Player 1 Coppers: 3
Player 2 Coppers: 2
Player 3 Coppers: 1
Player 4 Coppers: 0
Testing player 1 cutpurse card play
Copper amounts for each player post cutpurse call:
Player 1 Coppers: 3
Player 2 Coppers: 1
Player 3 Coppers: 0
Player 4 Coppers: 0
****FAILED*****
Player 1's handcount = 4, expected = 4
 Player 2's handCount = 4, expected = 4
 Player 3's handCount = 4, expected = 4
 Player 4's handCount = 5, expected = 5
 coins = 5, expected = 6
 cutpurse return = 0, expected = 0

It is Player 2's turn
Copper amounts for each player pre cutpurse call:
Player 1 Coppers: 0
Player 2 Coppers: 3
Player 3 Coppers: 2
Player 4 Coppers: 1
Testing player 2 cutpurse card play
Copper amounts for each player post cutpurse call:
Player 1 Coppers: 0
Player 2 Coppers: 3
Player 3 Coppers: 1
Player 4 Coppers: 0
****PASSED****
Player 2's handcount = 4, expected = 4
 Player 3's handCount = 4, expected = 4
 Player 4's handCount = 4, expected = 4
 Player 1's handCount = 5, expected = 5
 coins = 5, expected = 5
 cutpurse return = 0, expected = 0

It is Player 3's turn
Copper amounts for each player pre cutpurse call:
Player 1 Coppers: 1
Player 2 Coppers: 0
Player 3 Coppers: 3
Player 4 Coppers: 2
Testing player 3 cutpurse card play
Copper amounts for each player post cutpurse call:
Player 1 Coppers: 0
Player 2 Coppers: 0
Player 3 Coppers: 3
Player 4 Coppers: 1
****FAILED*****
Player 3's handcount = 4, expected = 4
 Player 4's handCount = 4, expected = 4
 Player 1's handCount = 4, expected = 4
 Player 2's handCount = 5, expected = 5
 coins = 5, expected = 6
 cutpurse return = 0, expected = 0

It is Player 4's turn
Copper amounts for each player pre cutpurse call:
Player 1 Coppers: 2
Player 2 Coppers: 1
Player 3 Coppers: 0
Player 4 Coppers: 3
Testing player 4 cutpurse card play
Copper amounts for each player post cutpurse call:
Player 1 Coppers: 1
Player 2 Coppers: 0
Player 3 Coppers: 0
Player 4 Coppers: 3
****PASSED****
Player 4's handcount = 4, expected = 4
 Player 1's handCount = 4, expected = 4
 Player 2's handCount = 4, expected = 4
 Player 3's handCount = 5, expected = 5
 coins = 5, expected = 5
 cutpurse return = 0, expected = 0

************* END OF TEST FOR cutpurse card *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:84.62% of 78
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:71.43% of 14
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'smithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:100.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:10.07% of 268
Branches executed:17.84% of 185
Taken at least once:7.57% of 185
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:42.24% of 651
Branches executed:43.41% of 417
Taken at least once:34.53% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

************* START OF TEST FOR adventurer card *************

Testing adventurer for 4 players
Testing player 1 adventurer card with treasure cards in front of deck
****FAILED*****
Player 0's handcount = 7, expected = 7
 deckCount = 1, expected = 25
 discardCount = 25, expected = 0
 adventurer return = 0, expected = 0

Testing player 1 adventurer card with treasure cards in back of deck
****FAILED*****
Player 0's handcount = 9, expected = 9
 deckCount = 1, expected = 1
 discardCount = 50, expected = 49
 adventurer return = 0, expected = 0

Testing player 2 adventurer card with treasure cards in front of deck
****FAILED*****
Player 1's handcount = 7, expected = 7
 deckCount = 1, expected = 25
 discardCount = 25, expected = 0
 adventurer return = 0, expected = 0

Testing player 2 adventurer card with treasure cards in back of deck
****FAILED*****
Player 1's handcount = 9, expected = 9
 deckCount = 1, expected = 1
 discardCount = 50, expected = 49
 adventurer return = 0, expected = 0

Testing player 3 adventurer card with treasure cards in front of deck
****FAILED*****
Player 2's handcount = 7, expected = 7
 deckCount = 1, expected = 25
 discardCount = 25, expected = 0
 adventurer return = 0, expected = 0

Testing player 3 adventurer card with treasure cards in back of deck
****FAILED*****
Player 2's handcount = 9, expected = 9
 deckCount = 1, expected = 1
 discardCount = 50, expected = 49
 adventurer return = 0, expected = 0

Testing player 4 adventurer card with treasure cards in front of deck
****FAILED*****
Player 3's handcount = 7, expected = 7
 deckCount = 1, expected = 25
 discardCount = 25, expected = 0
 adventurer return = 0, expected = 0

Testing player 4 adventurer card with treasure cards in back of deck
****FAILED*****
Player 3's handcount = 9, expected = 9
 deckCount = 1, expected = 1
 discardCount = 50, expected = 49
 adventurer return = 0, expected = 0

Failed 8 Tests!

************* END OF TEST FOR adventurer card *************

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:84.62% of 78
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:71.43% of 14
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'adventurerCard'
Lines executed:88.24% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'smithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'outpostCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'great_hallCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'villageCard'
Lines executed:100.00% of 5
No branches
No calls

Function 'cardEffect'
Lines executed:10.82% of 268
Branches executed:17.84% of 185
Taken at least once:8.11% of 185
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:44.85% of 651
Branches executed:46.28% of 417
Taken at least once:37.17% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

