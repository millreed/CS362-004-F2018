        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5816 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
     5816:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7%
branch  1 taken 93%
      409:   10:    return 1;
     5407:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 39%
branch  1 taken 61%
     2090:   12:    return -1;
     3317:   13:  return 0;
     5816:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 90 returned 100% blocks executed 91%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       90:   44:  SelectStream(1);
       90:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      180:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       90:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1960:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    19600:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    16929:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 1%
branch  3 taken 99%
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
     8909:   65:        }
      890:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       89:   73:  if (numPlayers == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
       89:   77:  else if (numPlayers == 3)
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
       89:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       89:   87:  if (numPlayers == 2)
branch  0 taken 0%
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
       89:   95:      state->supplyCount[estate] = 12;
       89:   96:      state->supplyCount[duchy] = 12;
       89:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       89:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       89:  102:  state->supplyCount[silver] = 40;
       89:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3738:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    29860:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
    14005:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1626:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
      168:  115:		  if (numPlayers == 2){ 
branch  0 taken 0%
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
      168:  118:		  else{ state->supplyCount[i] = 12; }
      168:  119:		}
        -:  120:	      else
        -:  121:		{
      687:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      855:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    13150:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    13150:  130:	}
        -:  131:
     1780:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      890:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  139:    {
      356:  140:      state->deckCount[i] = 0;
     2848:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     1068:  143:	  state->deck[i][j] = estate;
     1068:  144:	  state->deckCount[i]++;
     1068:  145:	}
     5696:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
     2492:  148:	  state->deck[i][j] = copper;
     2492:  149:	  state->deckCount[i]++;		
     2492:  150:	}
      356:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      890:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  155:    {
      356:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      356:  160:    }
        -:  161:
        -:  162:  //draw player hands
      890:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      356:  166:      state->handCount[i] = 0;
      356:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      356:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4984:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     2403:  178:      state->embargoTokens[i] = 0;
     2403:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       89:  182:  state->outpostPlayed = 0;
       89:  183:  state->phase = 0;
       89:  184:  state->numActions = 1;
       89:  185:  state->numBuys = 1;
       89:  186:  state->playedCardCount = 0;
       89:  187:  state->whoseTurn = 0;
       89:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1068:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      445:  193:    drawCard(state->whoseTurn, state);
      445:  194:  }
        -:  195:
       89:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       89:  198:  return 0;
       90:  199:}
        -:  200:
function shuffle called 562 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      562:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      562:  209:  if (state->deckCount[player] < 1)
branch  0 taken 28%
branch  1 taken 72%
      156:  210:    return -1;
      406:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     8654:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     3921:  215:    card = floor(Random() * state->deckCount[player]);
     3921:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3921:  217:    newDeckPos++;
    27230:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     9694:  219:      state->deck[player][i] = state->deck[player][i+1];
     9694:  220:    }
     3921:  221:    state->deckCount[player]--;
        -:  222:  }
     8654:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     3921:  224:    state->deck[player][i] = newDeck[i];
     3921:  225:    state->deckCount[player]++;
     3921:  226:  }
        -:  227:
      406:  228:  return 0;
      562:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 66%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        4:  243:  if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        4:  249:  card = handCard(handPos, state);
        4:  250:	printf("Card Played %d\n", card);
        -:  251:	
        -:  252:  //check if selected card is an action
        8:  253:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        4:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        4:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        4:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        4:  270:  return 0;
        4:  271:}
        -:  272:
function buyCard called 432 returned 100% blocks executed 100%
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
      432:  281:  who = state->whoseTurn;
        -:  282:
      432:  283:  if (state->numBuys < 1){
branch  0 taken 25%
branch  1 taken 75%
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
      108:  286:    return -1;
      324:  287:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 33%
branch  1 taken 67%
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
      108:  290:    return -1;
      216:  291:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 50%
branch  1 taken 50%
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      108:  294:    return -1;
        -:  295:  } else {
      108:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
      108:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
      108:  300:    state->coins = (state->coins) - (getCost(supplyPos));
      108:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
      108:  309:  return 0;
      432:  310:}
        -:  311:
function numHandCards called 84 returned 100% blocks executed 100%
        -:  312:int numHandCards(struct gameState *state) {
       84:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
function handCard called 112 returned 100% blocks executed 100%
        -:  316:int handCard(int handPos, struct gameState *state) {
      112:  317:  int currentPlayer = whoseTurn(state);
      112:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 432 returned 100% blocks executed 100%
        -:  321:int supplyCount(int card, struct gameState *state) {
      432:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 36 returned 100% blocks executed 100%
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
       36:  327:  int count = 0;
        -:  328:
      504:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:  330:    {
      240:  331:      if (state->deck[player][i] == card) count++;
branch  0 taken 11%
branch  1 taken 89%
      216:  332:    }
        -:  333:
      504:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:  335:    {
      240:  336:      if (state->hand[player][i] == card) count++;
branch  0 taken 11%
branch  1 taken 89%
      216:  337:    }
        -:  338:
      504:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:  340:    {
      240:  341:      if (state->discard[player][i] == card) count++;
branch  0 taken 11%
branch  1 taken 89%
      216:  342:    }
        -:  343:
       36:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 344 returned 100% blocks executed 100%
        -:  347:int whoseTurn(struct gameState *state) {
      344:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 124 returned 100% blocks executed 100%
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
      124:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
     1056:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 77%
branch  1 taken 23%
      404:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      404:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      404:  360:  }
      124:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
      124:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
       93:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       93:  366:  }
        -:  367:  else{
       31:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
      124:  371:  state->outpostPlayed = 0;
      124:  372:  state->phase = 0;
      124:  373:  state->numActions = 1;
      124:  374:  state->coins = 0;
      124:  375:  state->numBuys = 1;
      124:  376:  state->playedCardCount = 0;
      124:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
     1488:  381:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
      620:  382:    drawCard(state->whoseTurn, state);//Draw a card
      620:  383:  }
        -:  384:
        -:  385:  //Update money
      124:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
      124:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
    #####:  409:    }
    #####:  410:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
    #####:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 1097 returned 100% blocks executed 100%
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
     1097:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 19%
branch  1 taken 81%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
     1134:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 64%
branch  1 taken 36%
      361:  535:      state->deck[player][i] = state->discard[player][i];
      361:  536:      state->discard[player][i] = -1;
      361:  537:    }
        -:  538:
      206:  539:    state->deckCount[player] = state->discardCount[player];
      206:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
      206:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
      206:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
      206:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
      206:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
      206:  560:    if (deckCounter == 0)
branch  0 taken 76%
branch  1 taken 24%
      156:  561:      return -1;
        -:  562:
       50:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       50:  564:    state->deckCount[player]--;
       50:  565:    state->handCount[player]++;//Increment hand count
       50:  566:  }
        -:  567:
        -:  568:  else{
      891:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      891:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      891:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      891:  577:    state->deckCount[player]--;
      891:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      941:  581:  return 0;
     1097:  582:}
        -:  583:
function getCost called 648 returned 100% blocks executed 96%
        -:  584:int getCost(int cardNumber)
        -:  585:{
      648:  586:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
       24:  589:      return 0;
        -:  590:    case estate:
       24:  591:      return 2;
        -:  592:    case duchy:
       24:  593:      return 5;
        -:  594:    case province:
       24:  595:      return 8;
        -:  596:    case copper:
       24:  597:      return 0;
        -:  598:    case silver:
       24:  599:      return 3;
        -:  600:    case gold:
       24:  601:      return 6;
        -:  602:    case adventurer:
       24:  603:      return 6;
        -:  604:    case council_room:
       24:  605:      return 5;
        -:  606:    case feast:
       24:  607:      return 4;
        -:  608:    case gardens:
       24:  609:      return 4;
        -:  610:    case mine:
       24:  611:      return 5;
        -:  612:    case remodel:
       24:  613:      return 4;
        -:  614:    case smithy:
       24:  615:      return 4;
        -:  616:    case village:
       24:  617:      return 3;
        -:  618:    case baron:
       24:  619:      return 4;
        -:  620:    case great_hall:
       24:  621:      return 3;
        -:  622:    case minion:
       24:  623:      return 5;
        -:  624:    case steward:
       24:  625:      return 3;
        -:  626:    case tribute:
       24:  627:      return 5;
        -:  628:    case ambassador:
       24:  629:      return 3;
        -:  630:    case cutpurse:
       24:  631:      return 4;
        -:  632:    case embargo: 
       24:  633:      return 2;
        -:  634:    case outpost:
       24:  635:      return 5;
        -:  636:    case salvager:
       24:  637:      return 4;
        -:  638:    case sea_hag:
       24:  639:      return 4;
        -:  640:    case treasure_map:
       24:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
      648:  645:}
        -:  646:
function adventurer_card called 0 returned 0% blocks executed 0%
        -:  647:int adventurer_card(struct gameState *state, int currentPlayer, int *drawntreasure, int *z, int *nextPlayer)
        -:  648:{
        -:  649:	int temphand[MAX_HAND];
        -:  650:	int cardDrawn;
        -:  651:
    #####:  652:	while(*drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  653:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  654:			shuffle(currentPlayer, state);
    #####:  655:		}
    #####:  656:		drawCard(currentPlayer, state);
    #####:  657:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  658:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:			*drawntreasure+=1;
        -:  660:		else{
    #####:  661:			temphand[*z]=cardDrawn;
    #####:  662:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:			*z+=1;
        -:  664:		}
        -:  665:	}
    #####:  666:	while(*z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  667:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  668:		z=z-1;
        -:  669:	}
    #####:  670:	return 0;
        -:  671:}
        -:  672:
        -:  673:
        -:  674:
function smithy_card called 12 returned 100% blocks executed 100%
        -:  675:int smithy_card(int currentPlayer, struct gameState *state, int handPos)
        -:  676:{
        -:  677:	int i;
        -:  678:	//+3 Cards
       72:  679:	for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  680:	{
       24:  681:		drawCard(currentPlayer, state);
       24:  682:	}
        -:  683:
        -:  684:	//discard card from hand
       12:  685:	discardCard(handPos, currentPlayer, state, 0);
       12:  686:	return 0;
        -:  687:}
        -:  688:
function council_room_card called 0 returned 0% blocks executed 0%
        -:  689:int council_room_card(int currentPlayer, struct gameState *state, int handPos)
        -:  690:{
        -:  691:	int i;
        -:  692:	//+4 Cards
    #####:  693:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:		drawCard(currentPlayer, state);
    #####:  696:	}
        -:  697:	
        -:  698:	//+1 Buy
    #####:  699:	state->numBuys++;
        -:  700:	
        -:  701:	//Each other player draws a card
    #####:  702:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  703:	{
    #####:  704:		if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  705:		{
    #####:  706:			drawCard(i, state);
    #####:  707:		}
    #####:  708:	}
        -:  709:	
        -:  710:	//put played card in played card pile
    #####:  711:	discardCard(handPos, currentPlayer, state, 0);
        -:  712:	
    #####:  713:	return 0;
        -:  714:}
        -:  715:
function mine_card called 0 returned 0% blocks executed 0%
        -:  716:int mine_card(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  717:{
        -:  718:	int i, j;
        -:  719:	
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:	
    #####:  722:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:		return -1;
        -:  725:	}
        -:  726:	
    #####:  727:	if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:		return -1;
        -:  730:	}
        -:  731:	
    #####:  732:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  733:	{
    #####:  734:		return -1;
        -:  735:	}
        -:  736:	
    #####:  737:	gainCard(choice2, state, 2, currentPlayer);
        -:  738:	
        -:  739:	//discard card from hand
    #####:  740:	discardCard(handPos, currentPlayer, state, 0);
        -:  741:	
        -:  742:	//discard trashed card
    #####:  743:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:		{
    #####:  747:			discardCard(i, currentPlayer, state, 0);
    #####:  748:			break;
        -:  749:		}
    #####:  750:	}
        -:  751:	
    #####:  752:	return 0;
    #####:  753:}
        -:  754:
function minion_card called 0 returned 0% blocks executed 0%
        -:  755:int minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2)
        -:  756:{
        -:  757:	int i, j;
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
        -:  763:
    #####:  764:	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  765:	{
    #####:  766:		state->coins = state->coins + 2;
    #####:  767:	}
        -:  768:
    #####:  769:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  770:	{
        -:  771:		//discard hand
    #####:  772:		if(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  773:		{
    #####:  774:			discardCard(handPos, currentPlayer, state, 0);
    #####:  775:		}
        -:  776:		
        -:  777:		//draw 4
    #####:  778:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  779:		{
    #####:  780:			drawCard(currentPlayer, state);
    #####:  781:		}
        -:  782:		
        -:  783:		//other players discard hand and redraw if hand size > 4
    #####:  784:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  785:		{
    #####:  786:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  787:			{
    #####:  788:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  789:				{
        -:  790:					//discard hand
    #####:  791:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  792:					{
    #####:  793:						discardCard(handPos, i, state, 0);
        -:  794:					}
        -:  795:					
        -:  796:					//draw 4
    #####:  797:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  798:					{
    #####:  799:						drawCard(i, state);
    #####:  800:					}
    #####:  801:				}
    #####:  802:			}
    #####:  803:		}
        -:  804:		
    #####:  805:	}
    #####:  806:	return 0;
        -:  807:}
        -:  808:
function cardEffect called 24 returned 100% blocks executed 11%
        -:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int x;
        -:  815:  int index;
       24:  816:  int currentPlayer = whoseTurn(state);
       24:  817:  int nextPlayer = currentPlayer + 1;
        -:  818:
       24:  819:  int tributeRevealedCards[2] = {-1, -1};
        -:  820:  int temphand[MAX_HAND];// moved above the if statement
       24:  821:  int drawntreasure=0;
       24:  822:  int z = 0;// this is the counter for the temp hand
       24:  823:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 25%
branch  1 taken 75%
        6:  824:    nextPlayer = 0;
        6:  825:  }
        -:  826:	
        -:  827:  //uses switch to select card and perform actions
       24:  828:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 17%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  829:    {
        -:  830:			
        -:  831:    case adventurer:
        -:  832:		
    #####:  833:		return adventurer_card(state, currentPlayer, &drawntreasure, &z, &nextPlayer);
        -:  834:			
        -:  835:    case council_room:
    #####:  836:		return council_room_card(currentPlayer, state, handPos);
        -:  837:			
        -:  838:    case feast:
        -:  839:      //gain card with cost up to 5
        -:  840:      //Backup hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  842:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  843:		state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  844:      }
        -:  845:      //Backup hand
        -:  846:
        -:  847:      //Update Coins for Buy
    #####:  848:      updateCoins(currentPlayer, state, 5);
    #####:  849:      x = 1;//Condition to loop on
    #####:  850:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  851:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  852:	  if (DEBUG)
        -:  853:	    printf("None of that card left, sorry!\n");
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  857:	  }
    #####:  858:	}
    #####:  859:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  860:	  printf("That card is too expensive!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  864:	  }
    #####:  865:	}
        -:  866:	else{
        -:  867:
        -:  868:	  if (DEBUG){
        -:  869:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  870:	  }
        -:  871:
    #####:  872:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  873:	  x = 0;//No more buying cards
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
        -:  879:	}
        -:  880:      }     
        -:  881:
        -:  882:      //Reset Hand
    #####:  883:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  884:	state->hand[currentPlayer][i] = temphand[i];
    #####:  885:	temphand[i] = -1;
    #####:  886:      }
        -:  887:      //Reset Hand
        -:  888:      			
    #####:  889:      return 0;
        -:  890:			
        -:  891:    case gardens:
    #####:  892:      return -1;
        -:  893:			
        -:  894:    case mine:
    #####:  895:			return mine_card(state, currentPlayer, choice1, choice2, handPos);
        -:  896:			
        -:  897:    case remodel:
    #####:  898:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  899:
    #####:  900:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  901:	{
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
    #####:  905:      gainCard(choice2, state, 0, currentPlayer);
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
        -:  909:
        -:  910:      //discard trashed card
    #####:  911:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  912:	{
    #####:  913:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  914:	    {
    #####:  915:	      discardCard(i, currentPlayer, state, 0);			
    #####:  916:	      break;
        -:  917:	    }
    #####:  918:	}
        -:  919:
        -:  920:
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case smithy:
       12:  924:			return smithy_card(currentPlayer, state, handPos);
        -:  925:	
        -:  926:	case village:
        -:  927:		//+1 Card
        8:  928:		drawCard(currentPlayer, state);
        -:  929:		
        -:  930:		//+2 Actions
        8:  931:		state->numActions = state->numActions + 2;
        -:  932:		
        -:  933:		//discard played card from hand
        8:  934:		discardCard(handPos, currentPlayer, state, 0);
        8:  935:		return 0;
        -:  936:			
        -:  937:	case baron:
    #####:  938:		state->numBuys++;//Increase buys by 1!
    #####:  939:		if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  940:			int p = 0;//Iterator for hand!
    #####:  941:			int card_not_discarded = 1;//Flag for discard set!
    #####:  942:			while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  943:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  944:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  945:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  946:					state->discardCount[currentPlayer]++;
    #####:  947:					for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  948:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  949:					}
    #####:  950:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  951:					state->handCount[currentPlayer]--;
    #####:  952:					card_not_discarded = 0;//Exit the loop
    #####:  953:				}
    #####:  954:				else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  955:					if(DEBUG) {
        -:  956:						printf("No estate cards in your hand, invalid choice\n");
        -:  957:						printf("Must gain an estate if there are any\n");
        -:  958:					}
    #####:  959:					if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  960:						gainCard(estate, state, 0, currentPlayer);
    #####:  961:						state->supplyCount[estate]--;//Decrement estates
    #####:  962:						if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  963:							isGameOver(state);
    #####:  964:						}
    #####:  965:					}
    #####:  966:					card_not_discarded = 0;//Exit the loop
    #####:  967:				}
        -:  968:				
        -:  969:				else{
    #####:  970:					p++;//Next card
        -:  971:				}
        -:  972:			}
    #####:  973:		}
        -:  974:		
        -:  975:		else{
    #####:  976:			if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  977:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  978:				state->supplyCount[estate]--;//Decrement Estates
    #####:  979:				if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  980:					isGameOver(state);
    #####:  981:				}
    #####:  982:			}
        -:  983:		}
        -:  984:		
        -:  985:		
    #####:  986:		return 0;
        -:  987:    case great_hall:
        -:  988:      //+1 Card
    #####:  989:      drawCard(currentPlayer, state);
        -:  990:			
        -:  991:      //+1 Actions
    #####:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
    #####:  996:      return 0;
        -:  997:		
        -:  998:    case minion:
    #####:  999:		return minion_card(state, handPos, currentPlayer, choice1, choice2);
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //+2 cards
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
    #####: 1007:	}
    #####: 1008:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
        -: 1010:	  //+2 coins
    #####: 1011:	  state->coins = state->coins + 2;
    #####: 1012:	}
        -: 1013:      else
        -: 1014:	{
        -: 1015:	  //trash 2 cards in hand
    #####: 1016:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1017:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1018:	}
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
    #####: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
    #####: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
        -: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
    #####: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
    #####: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
    #####: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1069:	  state->coins += 2;
    #####: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
    #####: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
    #####: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1099:	    {
    #####: 1100:	      j++;
    #####: 1101:	    }
    #####: 1102:	}
    #####: 1103:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
        -: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1120:	    }
    #####: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
    #####: 1134:		  break;
        -: 1135:		}
    #####: 1136:	    }
    #####: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
        4: 1143:      updateCoins(currentPlayer, state, 2);
       40: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1145:	{
       16: 1146:	  if (i != currentPlayer)
branch  0 taken 75%
branch  1 taken 25%
        -: 1147:	    {
       80: 1148:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 90%
branch  1 taken 10%
        -: 1149:		{
       36: 1150:		  if (state->hand[i][j] == copper)
branch  0 taken 22%
branch  1 taken 78%
        -: 1151:		    {
        8: 1152:		      discardCard(j, i, state, 0);
        8: 1153:		      break;
        -: 1154:		    }
       28: 1155:		  if (j == state->handCount[i])
branch  0 taken 0%
branch  1 taken 100%
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1158:			{
        -: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
       28: 1164:		}
        -: 1165:					
       12: 1166:	    }
        -: 1167:				
       16: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
        4: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
        4: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1223:	}
    #####: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
    #####: 1237:	}
    #####: 1238:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
       24: 1259:}
        -: 1260:
function discardCard called 32 returned 100% blocks executed 90%
        -: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
       32: 1265:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1266:    {
        -: 1267:      //add card to played pile
       32: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       32: 1269:      state->playedCardCount++;
       32: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
       32: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
       32: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 13%
branch  1 taken 88%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        4: 1279:      state->handCount[currentPlayer]--;
        4: 1280:    }
       28: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    #####: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
       28: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
       28: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
       28: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
       32: 1296:  return 0;
        -: 1297:}
        -: 1298:
function gainCard called 108 returned 100% blocks executed 72%
        -: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
      108: 1304:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
      108: 1314:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
    #####: 1318:    }
      108: 1319:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
    #####: 1323:    }
        -: 1324:  else
        -: 1325:    {
      108: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      108: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
      108: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
      108: 1333:  return 0;
      108: 1334:}
        -: 1335:
function updateCoins called 221 returned 100% blocks executed 100%
        -: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
      221: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
     2332: 1344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 81%
branch  1 taken 19%
        -: 1345:    {
      945: 1346:      if (state->hand[player][i] == copper)
branch  0 taken 57%
branch  1 taken 43%
        -: 1347:	{
      538: 1348:	  state->coins += 1;
      538: 1349:	}
      407: 1350:      else if (state->hand[player][i] == silver)
branch  0 taken 4%
branch  1 taken 96%
        -: 1351:	{
       15: 1352:	  state->coins += 2;
       15: 1353:	}
      392: 1354:      else if (state->hand[player][i] == gold)
branch  0 taken 5%
branch  1 taken 95%
        -: 1355:	{
       21: 1356:	  state->coins += 3;
       21: 1357:	}	
      945: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
      221: 1361:  state->coins += bonus;
        -: 1362:
      221: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
